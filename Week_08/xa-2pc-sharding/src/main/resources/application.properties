# 配置Sharding-JDBC的分片策略
# 配置数据源，给数据源起名o1,o2...此处可配置多数据源
spring.shardingsphere.datasource.names=o1,o2

# 配置允许后面的Bean覆盖前面名称重复的Bean
spring.main.allow-bean-definition-overriding=true

# 配置数据源具体内容————————包含  连接池，  驱动，             地址，   用户名，    密码
# 由于上面配置数据源只有g1因此下面只配置g1.type,g1.driver-class-name,g1.url,g1.username,g1.password
spring.shardingsphere.datasource.o1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.o1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.o1.url=jdbc:mysql://127.0.0.1:3306/test_1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.o1.username=root
spring.shardingsphere.datasource.o1.password=123456789


spring.shardingsphere.datasource.o2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.o2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.o2.url=jdbc:mysql://127.0.0.1:3306/test_2?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.o2.username=root
spring.shardingsphere.datasource.o2.password=123456789

# 配置表的分布，表的策略
spring.shardingsphere.sharding.tables.orders.actual-data-nodes=o$->{1..2}.orders_$->{0..15}

# 指定orders表 id 生成策略为 SNOWFLAKE
spring.shardingsphere.sharding.tables.orders.key-generator.column=id
spring.shardingsphere.sharding.tables.orders.key-generator.type=SNOWFLAKE
# 指定分片策略 约定id值%2
spring.shardingsphere.sharding.tables.orders.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.orders.table-strategy.inline.algorithm-expression=orders_$->{id % 16}

# 指定数据库分片策略 约定user_id%2+1，为1入o1,为2入o2
spring.shardingsphere.sharding.tables.orders.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.orders.database-strategy.inline.algorithm-expression=o$->{user_id % 2 + 1}


# 打开sql输出日志
spring.shardingsphere.props.sql.show=true

